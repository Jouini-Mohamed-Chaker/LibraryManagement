Spring Boot notes:

packages are better seperated by service 
each service best follow the MVC model

the application's main class should have a @SpringBootApplication annotation

Never use new keyword to initialise classes , use beans to let spring handle it (except new types)

in the controller you can use:
    @RestController : on top of the class for rest api creation
    @GetMapping("/path") : on a method that handles the requests to that path
    
controllers are dumb they just take requests and send it to the appropriate service to handle it

Repositories are good to store relevant in-memory data:
    @Repository : on top of the repo class
    use @PostConstruct on a method inside the repo class to do stuff when the class is first created (an init method, for example to add entries to the stores data)
    
when wanting to use a repo in a controller don't use new keyword , do this :
    private final ExampleRepository exampleRepositry;
    //Contructor
    public ExampleController(ExampleRepository exampleRepositry){
        this.exampleRepository = exampleRepository;
    }
    
don't use field injection (@Autowired) (might be present in older code)

when mapping use (GetMapping("/api/path")) when building rest apis

instead of using GetMapping("/api/path") in every method in the controller just use @RequestMapping("/api/path") on top of the controller class, then in the methods a GetMapping("/idk") will take you to /api/path/idk not just /idk

there is GetMapping, PostMapping, PutMapping, DeleteMapping , PatchMapping and RequestMapping to allow you to design RESTful endpoints based on the standard HTTP methods for CRUD operations.

you can use dynamic paths using:
    GetMapping("/{id}")
    ExampleType exampleMethod(@PathVariable Integer id){
        return exampleRepository.exampleMethod(id);
    }
    which allows us to use that variable in methods
    
Optional<ExampleType> return types are useful:
    ...
    Optional<ExampleType> example = exampleRepository.exampleMethod(id);
    if(example.isEmpty()){
        throw new ResponseStatusException(HttpStatus.NOT_FOUND);  
    }
    return example.get();

when we need to get an object from request body:
    void exampleMethod(@RequestBody ExampleType example){
        //stuff...
    }

use Postman to test apis

Use http response status to confirm api actions such as success/failure in put/post...:
    @ResponseStatus(HttpStatus.CREATED);
    @ResponseStatus(HttpStatus.NO_CONTENT);
    ...
    
create your own exceptions as a java class:
        @ResponseStatus(HttpStatus.NOT_FOUND)
        public class ExampleNotFoundException extends RuntimeException
        (){
            super("Run Not Found);
        }

Validate user input:
    Manually check entered data
    use spring validation api:
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-validation</artifactId>
        
spring validation usage examples:
    @NotEmpty
    String title;
    
    look at the annotations that can be used in the constraints package under jakarta.validation
    
    then in the controler when getting a paramater use:
    void create(@Valid @RequestBody Run run){
        runRepo.create(run);
    }
    
    better to use @Valid in all your requests (get/post...)
    
    
you can change server properties in the application.properties file:
    changing tomcat server port : 
        server.port=8085
    
    look at the spring documentation to expand on that
    
to add dependecies to the pom you can use the initialiser graphically then copy paste the code when hitting explore button (spring initialiser)


Not recommanded unless you need to for specific reason:    

in-memory database:
    dependency: H2 Database
    to talk to it: jdbc api
    in application.properties:
        //nice browser gui to manage the h2 db:
        spring.h2.console.enabled=true
        //localhost:8080/h2-console 
        //change db name
        spring.datasource.generate-unique-name=false
        spring.datasource.name=anyName
        
    the db will reset everytime we restart (in-memory), to make the schema automatically everytime:
        create file "schema.sql" in resources folder (next to application.properties)
        type in the sql commands to make schema you want , example:
            CREATE TABLE IF NOT EXIST Name (
                id INT NOT NULL,
                title varchar-=(250) NOT NULL,
                started_on timestamp NOT NULL,
                ...
                PRIMARY KEY(id)
            );
        
declare jdbc client;
    private final JdbcClient jdbcClient;
    public contructorName(JdbcClient jdbcClient){
        this.jdbcClient = jdbcClient;
    }
    
    then you can use it's methods like :
        jdbcClient.sql("sql commands to excecute")
                  //.param()
                  .query(Run.class)
                  .list();

End of not recommanded.

use a logger:
    private static final Logger log = LoggerFactory.getLogger(className)    
    
Reading json data for database:
    seems a bit advanced , i'll learn it when i need it
    
    
Using Databases:
    spring.datasource.url=jdbc:mysql://localhost:PORT/name
    spring.datasource.username=
    spring.datasource.password=    
    
    to automatically load sql code (.sql files should be automatically detected, not sure):
        spring.sql.init.mode=always
    //these commands need a database up and running 

Just Use docker , one command to set up whatever database you want:
    use docker-compose.yml to set up your services
    in the dependecies add Docker Compose support after adding all the services dependecies like "MySql driver/kafka..." it will detect them and list them in the compose.yml file automatically
    COMPOSE.YML HAS TO BE IN THE ROOT OF THE PROJECT
    be careful with the version of the DB when working in a team
    the "ports:" part of the compose file , when it has one number that's the port in the vm and docker will use a dynamic port on the local machine , it's better to be specific specially when connecting to the DB so instead of:
    "ports:
        -'5543' //for example
        use 
        -'5543:5543' which will map it to the second value on the local machine

    make sure docker desktop is running
    
instead of manually using Jdbc client and writing your own sql queries use spring data
Spring data jdbc:
    add it as a dependecy
    wrap your object classes with interfaces, example:
           public interface BookRepo extends ListCrudRepository<Book, Integer> {
            
           }
           and the integer is the id so go to the book class and on top of the id add : @Id
           add also:
           @Version
           Integer version;
           (specific to spring data jdbc)
           
           now in the controller just make an instance of the repo and use it's buit-in methods:
            save(),get(),delete(),findById()...
            to add custom crud operations:
            //in the repo
                @Query
                List<Book> findAllByIbsn(String isbn);
                
            //in the controller
                @GetMapping("/isbn/{isbn}")
                List<Book> findAllByIbsn(@PathVariable String isbn){
                    return bookRepo.findAllByIbsn(isbn);
            }







